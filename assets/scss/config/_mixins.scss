// Responsive breakpoint above
@mixin respond-above($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    @media (min-width: $breakpoint-value) {
      @content;
    }
  } @else {
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

// Responsive breakpoint below
@mixin respond-below($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    @media (max-width: ($breakpoint-value - 1)) {
      @content;
    }
  } @else {
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

// Responsive breakpoint between
@mixin respond-between($lower, $upper) {
  @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {
    $lower-breakpoint: map-get($breakpoints, $lower);
    $upper-breakpoint: map-get($breakpoints, $upper);

    @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
      @content;
    }
  } @else {
    @if (map-has-key($breakpoints, $lower) == false) {
      @warn 'Your lower breakpoint was invalid: #{$lower}.';
    }

    @if (map-has-key($breakpoints, $upper) == false) {
      @warn 'Your upper breakpoint was invalid: #{$upper}.';
    }
  }
}

button {
  color: $green;
  background-color: transparent;
  border: 1px solid $green;
  border-radius: $border-radius;
  font-size: $fz-xs;
  font-family: $font-mono;
  line-height: 1;
  text-decoration: none;
  cursor: pointer;
  transition: $transition;
  padding: 1.25rem 1.75rem;
  &:hover,
  &:focus,
  &:active {
    background-color: $green-tint;
    outline: none;
  }
  &:after {
    display: none !important;
  }
}

.link {
  display: inline-block;
  text-decoration: none;
  text-decoration-skip-ink: auto;
  color: inherit;
  position: relative;
  transition: $transition;
  &:hover,
  &:active,
  &:focus {
    color: $green;
    outline: 0;
  }
}

.inlineLink {
  display: inline-block;
  text-decoration: none;
  text-decoration-skip-ink: auto;
  position: relative;
  transition: $transition;
  color: $green;

  &:hover,
  &:focus,
  &:active {
    color: $green;
    outline: 0;

    &:after {
      width: 100%;
    }

    & > * {
      color: $green !important;
      transition: $transition;
    }
  }

  &:after {
    content: '';
    display: block;
    width: 0;
    height: 1px;
    position: relative;
    bottom: 0.37em;
    background-color: $green;
    transition: $transition;
    opacity: 0.5;
  }
}

.smallButton {
  color: $green;
  background-color: transparent;
  border: 1px solid $green;
  border-radius: $border-radius;
  padding: 0.75rem 1rem;
  font-size: $fz-xs;
  font-family: $font-mono;
  line-height: 1;
  text-decoration: none;
  cursor: pointer;
  transition: $transition;
  &:hover,
  &:focus,
  &:active {
    background-color: $green-tint;
    outline: none;
  }
  &:after {
    display: none !important;
  }
}

.bigButton {
  color: $green;
  background-color: transparent;
  border: 1px solid $green;
  border-radius: $border-radius;
  padding: 1.25rem 1.75rem;
  font-size: $fz-sm;
  font-family: $font-mono;
  line-height: 1;
  text-decoration: none;
  cursor: pointer;
  transition: $transition;
  &:hover,
  &:focus,
  &:active {
    background-color: $green-tint;
    outline: none;
  }
  &:after {
    display: none !important;
  }
}

.boxShadow {
  box-shadow: 0 10px 30px -15px $navy-shadow;
  transition: $transition;

  &:hover,
  &:focus {
    box-shadow: 0 20px 30px -15px $navy-shadow;
  }
}

.fancyList {
  padding: 0;
  margin: 0;
  list-style: none;
  font-size: $fz-lg;

  li {
    position: relative;
    padding-left: 30px;
    margin-bottom: 10px;

    &:before {
      content: 'â–¹';
      position: absolute;
      left: 0;
      color: $green;
    }
  }
}

.resetList {
  list-style: none;
  padding: 0;
  margin: 0;
}
